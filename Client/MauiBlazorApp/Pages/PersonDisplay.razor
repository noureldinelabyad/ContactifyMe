@page "/personDisplay/{id:int}"
@using CommonCode.Models
@using CommonCode.Services
@using CurrieTechnologies.Razor.SweetAlert2;


@inject CommonCode.Services.IPersonService PersonService
@inject NavigationManager NavManager
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal    // sweet alert call it Swal


<div class="page">

    <h3>Person Details</h3>
    @if (personDetail != null)
    {
        <div class="text-center mb-4">
            <h4>Contact Details</h4>
        </div>

        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Name</h5>
                <div><strong>Vorname:</strong> @personDetail.Vorname</div>
                <div><strong>Nachname:</strong> @personDetail.Nachname</div>
                <div><strong>Zwischenname:</strong> @personDetail.Zwischenname</div>
            </div>
        </div>

        <div class="card bg-light mb-4">
            <div class="card-body">
                <h5 class="card-title">Contact Information</h5>
                <div><strong>Email:</strong> @personDetail.Email</div>
                <div>
                    @if (PersonNummern != null)
                    {
                        foreach (var TelNummer in PersonNummern)
                        {
                            <div>@TelNummer</div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="card bg-light mb-4">
            <div class="card-body">
                <h5 class="card-title">Address</h5>
                <div><strong>Strasse:</strong> @personDetail.Strasse</div>
                <div><strong>Hausnummer:</strong> @personDetail.Hausnummer</div>
                <div><strong>PLZ:</strong> @personDetail.PLZ</div>
                <div><strong>Stadt:</strong> @personDetail.Stadt</div>
                <div><strong>Land:</strong> @personDetail.Land</div>
            </div>
        </div>

        <div class="card bg-light mb-4">
            <div class="card-body">
                <h5 class="card-title">Additional Information</h5>
                <div><strong>Gender:</strong> @personDetail.Gender</div>
            </div>
        </div>

        <button @onclick="@(e => UpdatePersonDetails())" class="mt-3 btn btn-primary mx-1">Edit</button>

        <button @onclick="@(e => DisplayDeleteConfirmation(personDetail.Id))" class="mt-3 btn btn-primary mx-1">Delete</button>

    }
    else
    {
        <p>Loading...</p>
    }
</div>

<style>

    .page{
        background-color: gray;
/*         background-color: #1E314B !important;
 */    }
   
    .card {
        margin: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card-body {
        padding: 20px;
    }

    .card-title {
        font-size: 1.25rem;
        margin-bottom: 10px;
    }

    .list-group-item {
        padding: 8px 0;
        border: none;
    }

        .list-group-item:first-child {
            border-top: none;
        }

        .list-group-item:last-child {
            border-bottom: none;
        }

    strong {
        font-weight: bold;
    }
</style>

@code {

    //private List<PersonModel.Telefonnummer> PersonNummern = new List<PersonModel.Telefonnummer>();

    private List<string> PersonNummern = new List<string>(); // Assuming phone numbers are strings

    private PersonModel personDetail;

    [Parameter]
    public int Id { get; set; }
    private string Nachname;
    private string Vorname;
    private string Zwischenname;
    private string Email;
    private string Telefonnummer;
    private string Strasse;
    private string Hausnummer;
    private string PLZ;
    private string Stadt;
    private string Land;
    private string gender;


    private void SetGender(string gender)
    {
        this.gender = gender;
    }

    protected override async Task OnInitializedAsync()
    {
        personDetail = await PersonService.GetPersonDetailById(Id);
        if (Id > 0)
        {
            var existingPersonDetail = await PersonService.GetPersonDetailById(Id);
            if (existingPersonDetail?.Id > 0)
            {
                Nachname = existingPersonDetail.Nachname;
                Vorname = existingPersonDetail.Vorname;
                Zwischenname = existingPersonDetail.Zwischenname;
                Email = existingPersonDetail.Email;
                if (personDetail?.PersonNummern != null && personDetail.PersonNummern.Any())
                {
                    PersonNummern = personDetail.PersonNummern.Select(tn => tn.TelNummer).ToList();
                }
                Hausnummer = existingPersonDetail.Hausnummer;
                PLZ = existingPersonDetail.PLZ.ToString();
                Stadt = existingPersonDetail.Stadt;
                Land = existingPersonDetail.Land;
                gender = existingPersonDetail.Gender;
            }
        }
    }

    private void UpdatePersonDetails()
    {
        NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
    }

    private async void DisplayDeleteConfirmation(int personId)
    {

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "you sure you want to delete?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "yes",
                CancelButtonText = "No",

                CustomClass = new SweetAlertCustomClass
                {
                    Popup = "my-custom-popup-class",
                    Title = "my-custom-title-class",
                    Icon = "Icon-popup",
                    Content = "my-custom-content-class",
                    ConfirmButton = "my-custom-confirm-button-class",
                    CancelButton = "my-custom-cancel-button-class"
                }


            });

        var confrim = !string.IsNullOrEmpty(result.Value); // if value ture means that user clikced on conferm btn.

        //  bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
        if (confrim)
        {
            var deleteresponse = await PersonService.DeletePerson(personId
            // {
            //     Id = personId
            // }
            );

            if (deleteresponse.Success)
            {
                await OnInitializedAsync();

                StateHasChanged();

                if (!string.IsNullOrEmpty(result.Value))
                {
                    NavManager.NavigateTo("/");

                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Icon = SweetAlertIcon.Success,
                            Text = "Contact deleted",

                            CustomClass = new SweetAlertCustomClass
                            {

                                Content = "my-custom-content-class",
                                ConfirmButton = "my-custom-confirm-button-class",
                            }

                        });
                }
                else
                {
                }

            }
        }
    }


}
