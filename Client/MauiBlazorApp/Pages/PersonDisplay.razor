@page "/personDisplay/{id:int}"
@using CommonCode.Models
@using CommonCode.Services
@using CurrieTechnologies.Razor.SweetAlert2;


@inject CommonCode.Services.IPersonService PersonService
@inject NavigationManager NavManager
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal    // sweet alert call it Swal
@inject IModalService Modal


<div class="page">

    @if (personDetail != null)
    {
        <div class="editdiv">
            <h3 class="pagetitle">Personen Daten</h3>

            <button @onclick="(Action)(() => UpdatePersonDetails())" class="editbtn">Bearbeiten</button>
        </div>

        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Personenbezogene Daten</h5>
                <div><strong>Vorname:</strong> @personDetail.Vorname</div>
                <div><strong>Nachname:</strong> @personDetail.Nachname</div>
                <div><strong>Zwischenname:</strong> @personDetail.Zwischenname</div>
                <div><strong>Geschlecht:</strong> @personDetail.Gender</div>

            </div>
        </div>

        <div class="card bg-light mb-4">
            <div class="card-body">
                <h5 class="card-title">Adresse</h5>
                <h5 class="card-title">Adresse</h5>
                <div><strong>Strasse, Nr:</strong> @personDetail.Strasse  @personDetail.Hausnummer </div>
                <div><strong>Stadt,PLZ:</strong> @personDetail.Stadt @personDetail.PLZ </div>
                <div><strong>Land:</strong> @personDetail.Land</div>
            </div>
        </div>

        <div class="card bg-light mb-4">
            <div class="card-body">
                <h5 class="card-title">Kontakt</h5>
                <div><strong>Email:</strong> @personDetail.Email</div>
                <div>
                    @if (PersonNummern != null)
                    {
                        foreach (var TelNummer in PersonNummern)
                        {
                            <div><strong>Telefonnummer:</strong> @TelNummer</div>
                        }
                    }
                </div>
            </div>
        </div>

        <button @onclick="(Action)(() => DisplayDeleteConfirmation(personDetail.Id))" class="deletebtn">Löschen</button>

    }
    else
    {
        <p>Loading...</p>
    }
</div>


@code {

    //private List<PersonModel.Telefonnummer> PersonNummern = new List<PersonModel.Telefonnummer>();

    private List<string> PersonNummern = new List<string>(); // Assuming phone numbers are strings

    private PersonModel personDetail;

    [Parameter]
    public int Id { get; set; }
    private string Nachname;
    private string Vorname;
    private string Zwischenname;
    private string Email;
    private string Telefonnummer;
    private string Strasse;
    private string Hausnummer;
    private string PLZ;
    private string Stadt;
    private string Land;
    private string gender;


    private void SetGender(string gender)
    {
        this.gender = gender;
    }

    protected override async Task OnInitializedAsync()
    {
        personDetail = await PersonService.GetPersonDetailById(Id);
        if (Id > 0)
        {
            var existingPersonDetail = await PersonService.GetPersonDetailById(Id);
            if (existingPersonDetail?.Id > 0)
            {
                Nachname = existingPersonDetail.Nachname;
                Vorname = existingPersonDetail.Vorname;
                Zwischenname = existingPersonDetail.Zwischenname;
                Email = existingPersonDetail.Email;
                if (personDetail?.PersonNummern != null && personDetail.PersonNummern.Any())
                {
                    PersonNummern = personDetail.PersonNummern.Select(tn => tn.TelNummer).ToList();
                }
                Hausnummer = existingPersonDetail.Hausnummer;
                PLZ = existingPersonDetail.PLZ.ToString();
                Stadt = existingPersonDetail.Stadt;
                Land = existingPersonDetail.Land;
                gender = existingPersonDetail.Gender;
            }
        }
    }

    private void UpdatePersonDetails()
    {
        NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
    }

    private async void DisplayDeleteConfirmation(int personId)
    {

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "you sure you want to delete?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "yes",
                CancelButtonText = "No",

                CustomClass = new SweetAlertCustomClass
                {
                    Popup = "my-custom-popup-class",
                    Title = "my-custom-title-class",
                    Icon = "Icon-popup",
                    Content = "my-custom-content-class",
                    ConfirmButton = "my-custom-confirm-button-class",
                    CancelButton = "my-custom-cancel-button-class"
                }


            });

        var confrim = !string.IsNullOrEmpty(result.Value); // if value ture means that user clikced on conferm btn.

        //  bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
        if (confrim)
        {
            var deleteresponse = await PersonService.DeletePerson(personId
            // {
            //     Id = personId
            // }
            );

            if (deleteresponse.Success)
            {
                await OnInitializedAsync();

                StateHasChanged();

                if (!string.IsNullOrEmpty(result.Value))
                {
                    NavManager.NavigateTo("/");

                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Icon = SweetAlertIcon.Success,
                            Text = "Contact deleted",

                            CustomClass = new SweetAlertCustomClass
                            {

                                Content = "my-custom-content-class",
                                ConfirmButton = "my-custom-confirm-button-class",
                            }

                        });
                }
                else
                {
                }

            }
        }
    }


}
