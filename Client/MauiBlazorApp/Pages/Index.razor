@page "/"
@using MauiBlazorApp.Models
@using MauiBlazorApp.Services
@inject IPersonService PersonService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;

<head>
    <!-- for the deopdown update , delete  -->
    <link rel="stylesheet" href="_content/Blazorise/blazorise.css" />
    <link rel="stylesheet" href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" />

    <script src="_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js"></script>
    <script src="_content/Blazorise/blazorise.js"></script>
    <script src="_content/Blazorise.Bootstrap/blazorise.bootstrap.js"></script>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>

   

    
</head>

<h1>Person List</h1>

@* <iframe width="560" height="315" src="https://www.youtube.com/embed/m8e-FF8MsqU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
 *@

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search..." @bind="searchText" @oninput="HandleSearchTextChanged" />

    <button class="btn btn-clear" type="button" @onclick="ClearSearchText"><i class="fas fa-times-circle"> X </i></button>

    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="BtnSearch_Clicked">Search</button>
    </div>
</div>


<style>

    body {
        min-height: 100vh;
    }

    .btn-clear {
        background: none;
        border: none;
        padding: 0.5rem 0.9rem 0.5rem 1rem;
    }

        .btn-clear:hover {
            color: red;
        }

        .btn-clear:focus {
            outline: none;
        }

        .btn-clear i {
            font-size: 30rem;
            border-radius: 50%;
        }

    .input-group-append button:first-child {
        margin-right: 0.5rem;
    }



    .btn-outline-secondary {
        background: none;
        border: groove;
        padding: 0.5rem 0.5rem 0.5rem 0.5rem;
    }

    .btn-outline-secondary {
        color: black;
    }


        .btn-outline-secondary:hover {
            background-color: green;
        }

        .btn-outline-secondary:focus {
            outline: none;
        }

    .btn-clear i {
        font-size: 1rem;
        border-radius: 50%;
    }

    .input-group-append button:first-child {
        margin-right: 0.5rem;
    }




    .btn-primary.btn-sm,
    .btn-danger.btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.30rem;
    }


    .btn-secondary {
        background-color: Highlight;
        border-color: green;
        color: black;
        font-weight: normal;
    }

        .btn-secondary:hover
         {
            background-color: none;
            border-color: None;
            color: lightblue;
            font-weight: normal;
            border: none
        }

        .btn-secondary:active,
        .btn-secondary.active {
            background-color: white;
            border-color: None;
            color: lightblue;
            font-weight: normal;
            border:none
        }

    .dropdown-toggle.btn-secondary:
    {
        background-color: white;
        border-color: None;
        color: lightblue;
        font-weight: normal;
        border: none
    }
    .dropdown-toggle.btn-secondary:not([disabled]):not(.disabled).active:focus {
        box-shadow: none;
    }

    .dropdown-toggle.btn-secondary:focus {
        box-shadow: none;
            background-color: green;
        }
</style>

<div class="dropdown">
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @if (searchResults != null)
        {
            @foreach (var person in searchResults)
            {
                <li class="dropdown-item">@person.Nachname</li>
            }
        }
        
    </ul>
</div>

@if (searchResults != null)
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <td>Nachname</td>
                    <th>Vorname</th>
                    <!-- Add other table headers here -->
                </tr>
            </thead>
            <tbody>
                @foreach (var person in searchResults)
                {
                    @*                     <tr @onclick="@( () => DisplayOption(person) )">

            *@
                    <tr @onclick="@( () => DisplayOption(person) )">
                        <td>@person.Nachname</td>
                        <td>@person.Vorname</td>
                        <!-- Add other table data here -->
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@if (_PersonList == null)
{
    <p>Loading...</p>
}
else
{

    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>

                    <th>Vorname</th>
                    <td>Nachname</td>
                    <td>Zwischenname</td>
                    <td>Email</td>
                    <td>Telefonnummer</td>
                    <td>Strasse</td>
                    <td>Hausnummer</td>
                    <td>PLZ</td>
                    <td>Stadt</td>
                    <td>Land</td>
                    <td>Gender</td>
                    @*                res of the list
                *@
                </tr>
            </thead>
            <tbody>
                @foreach (var person in _PersonList)
                {
                    @* <tr @onclick="@(() => DisplayOption(person))"> *@

                    <tr>
                        <td>
                            <div class="position-relative">
                                @person.Vorname
                                <div class="dropdown">
                                    <button class="btn btn-secondary dropdown-toggle btn-sm" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        Options
                                    </button>
                                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                        <button class="btn btn-primary mx-1 mr-3" @onclick="@(() => DisplayUpdate(person.Id))">Update</button>
                                        <button class="btn btn-danger mx-1 mr-3 " @onclick="@(() => DisplayDeleteConfirmation(person.Id))">Delete</button>
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td>@person.Nachname</td>
                        <td>@person.Zwischenname</td>
                        <td>@person.Email</td>
                        <td>@person.Telefonnummer</td>
                        <td>@person.Strasse</td>
                        <td>@person.Hausnummer</td>
                        <td>@person.PLZ</td>
                        <td>@person.Stadt</td>
                        <td>@person.Land</td>
                        <td>@person.Gender</td>
                        <!-- Add other table data here -->
                        <td>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
}





@code {

    private void ClearSearchText()
    {

        searchText = "";
    }




    List<PersonModel> _PersonList;

    private string searchText = string.Empty;
    private List<PersonModel> allPersons;
    private List<PersonModel> searchResults;

    protected override async Task OnInitializedAsync()
    {
        allPersons = await PersonService.GetAllPersonsList();

        _PersonList = await PersonService.GetAllPersonsList();

    }

    private void HandleSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        HandleSearch();
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            searchResults = allPersons
            // .Where(person => person.Nachname.Contains(searchText) || person.Vorname.Contains(searchText))
            // .ToList();
            .Where(person =>
            person.Nachname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0
            || person.Vorname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0)
            .ToList();
        }
        else
        {
            searchResults = null; // Set it to null when search text is empty
        }
    }

    private async void BtnSearch_Clicked()
    {
        string searchText = this.searchText;

        if (!string.IsNullOrEmpty(searchText))
        {
            // var results = await PersonService.SearchPersonsByName(searchText);

            // if (results.Count > 0)
            // {
            //     searchResults = results;
            // }
            // else
            {
                bool addContact = await JSRuntime.InvokeAsync<bool>("confirm", $"Contact with name '{searchText}' does not exist. Do you want to add it?");

                if (addContact)
                {
                    NavManager.NavigateTo($"addPerson?name={searchText}");
                }
            }
        }
        else
        {
            await OnInitializedAsync();
        }
    }


    private void DisplayUpdate(int personId)
    {
        NavManager.NavigateTo($"updatePerson/{personId}");
    }

    private async void DisplayDeleteConfirmation(int personId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
        if (confirmed)
        {
            var deleteresponse = await PersonService.DeletePerson(new AddUpdatePersonRequest
                {
                    Id = personId
                });

            if (deleteresponse.Success)
            {
                await OnInitializedAsync();
                StateHasChanged();
            }
        }
    }

    private async void DisplayOption(PersonModel personDetail)
    {

        var response = await App.Current.MainPage.DisplayActionSheet("Select Option", "Ok", null, "Update Contact", "Delete Contact");

        if (response == "Update Contact")

        {
            NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
        }
        else if (response == "Delete Contact")

        {
            var deleteresponse = await PersonService.DeletePerson(new AddUpdatePersonRequest
                {
                    Id = personDetail.Id
                });

            if (deleteresponse.Success)
            {
                await OnInitializedAsync();
                this.StateHasChanged();
            }
        }
    }


}


        @code {
    [Parameter] public EventCallback<bool> OnConfirmation { get; set; }
}

<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this person?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>


@code {
    private async Task ConfirmDelete()
    {
        await OnConfirmation.InvokeAsync(true);
    }
}



