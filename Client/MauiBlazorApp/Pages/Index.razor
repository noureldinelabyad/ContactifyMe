@page "/"
@using MauiBlazorApp.Models
@using MauiBlazorApp.Services
@using System.Text
@using System.IO;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.JSInterop;
@using Newtonsoft.Json;
@using iTextSharp.text;
@using iTextSharp.text.pdf;

@inject SweetAlertService Swal    // sweet alert call it Swal
@inject IPersonService PersonService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;

@* @inject IFileService FileService
 *@

<head>
    <!-- for the deopdown update , delete    -->
   @*  <link rel="stylesheet" href="_content/Blazorise/blazorise.css" />
    <link rel="stylesheet" href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" /> *@

    <!-- for the dropdwon btn of exporting-->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>



    <!--the export method -->
    <script src="exportPdf.js"></script>

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!--sweet alert-->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-1.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.5/dist/sweetalert2.all.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.5/dist/sweetalert2.min.css" rel="stylesheet">


</head>

@* <iframe width="560" height="315" src="https://www.youtube.com/embed/m8e-FF8MsqU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
 *@

<div class="header">
    <span>Person List</span>


    <div class="input-group">
        <div class="search-bar">
            <input type="text" class="form-control" placeholder="Search..." @bind="searchText" @oninput="HandleSearchTextChanged">

            </input>


        </div>
        <button class="btn-clear" type="button" @onclick="ClearSearchText"><i class="fas fa-times-circle"> X </i></button>

        <span>
        </span>

        <div class="search-btndiv">
            <button class="search-btn" type="button" @onclick="BtnSearch_Clicked">Search</button>


        </div>

        <div class="dropdown">
            <button class="dropbtn">Exportieren als</button>
            <div class="dropdown-content">
                <button class="dropdown-item" @onclick="DownloadAsJson">JSON</button>
                <button class="dropdown-item" @onclick="DownloadAsPdf">PDF</button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table">
               

            </table>
        </div>
    </div>

</div>

<div class="search-dropdown">
    <div class="dropdown">
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            @if (searchResults != null)
            {
                @foreach (var person in searchResults)
                {
                    <li class="dropdown-item">@person.Nachname</li>
                }
            }
        </ul>
    </div>

    @if (searchResults != null)
    {
        <div class="table-responsive">
            <table class="table">
                <thead class=" table-head">
                    <tr>
                        <th>Nachname</th>
                        <th>Vorname</th>
                        <!-- Add other table headers here -->
                    </tr>
                </thead>
                <tbody class="table-body">
                    @foreach (var person in searchResults)
                    {

                        <tr @onclick="@( () => DisplayOption(person) )">
                            <td>@person.Nachname</td>
                            <td>@person.Vorname</td>
                            <!-- Add other table data here -->
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


<style>

   
    .header {
        background-color: white;
        width: 100%;
        font-size: xx-large;
        padding: 10px 16px;
        background: #1E314B;
        color: #f1f1f1;
        top: 0;
        padding-bottom: 30px;
        border-radius: 30px;
        margin-bottom: 0;
    }

    .input-group {
        background-color: #EFFFFF;
        padding-bottom: 1px;
        padding: 10px;
        margin-top: 1px;
        border: 2px solid blue;
        position: center;
        width: 100%;
    }

    .search-btndiv {
        margin: 0px;
    }

    .search-bar {
        width: 30%;
        margin-right: 2px;
        margin-top: 15px;
    }

    .content {
        padding: 16px;
    }

    body {
        min-height: 100vh;
    }

    .btn-clear {
        background: none;
        border: none;
        padding: 0.5rem 0.9rem 0.5rem 1rem;
        margin-bottom: 30px;
        margin-right: 10px;
    }

        .btn-clear:hover {
            color: red;
        }



    .search-btn {
        color: #FFFFFF;
        background-color: #748DA6;
        border-color: green;
        font-size: 25px;
        letter-spacing: 1px;
    }

        .search-btn:hover {
            background-color: green;
        }


    .btn-clear i {
        font-size: 1.5rem;
        border-radius: 50%;
    }



    .dropbtn {
        color: #FFFFFF;
        background-color: #748DA6;
        border-color: green;
        font-size: 25px;
        margin-left: 30px;
    }

    .dropdown {
        margin: 20px;
        float: right;
        position:static;
    }

    .dropdown-content a:hover {
        background-color: #f1f1f1 ;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    .dropdown:hover .dropbtn {
        background-color: #3e8e41;
    }

    .dropdown-content a {
        color: black;
        padding: 12px 16px;
        text-decoration: none;
        display: block;
        font-size: 20px;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        min-width: 160px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        font-size: 30px;
        z-index: 1; /* Bring the elements to the front */
    }



    .btn-secondary {
        background-color: Highlight;
        border-color: green;
        color: black;
        font-weight: normal;
    }

        .btn-secondary:hover {
            background-color: none;
            border-color: None;
            color: lightblue;
            font-weight: normal;
            border: solid;
        }

        .btn-secondary.active {
            background-color: white;
            border-color: None;
            color: lightblue;
            font-weight: normal;
            border: none
        }


    .table-container {
      max-height: 100%; /* Legen Sie die maximale Höhe fest, die der Container haben soll, bevor das Scrollen aktiviert wird */


      position: relative; /* Positionierung relativ für die Positionierung des Sticky-Headers */

      width:100%;
    }

    .table {
        @* border-collapse: collapse; /* Um die Zellen zu verbinden und die Ränder zu entfernen */ *@
         width: 100%; /* Füllt die gesamte Breite des Containers aus */

        position: center;
        width: 9%;
        width: 100%;
        text-align: center;
        background-color: #F1FFFF;
        border-radius: 30px;
    }

        .table th, .table td {
            border: 1px solid #ddd;
            position: center;
            width: 9%;
        }

     
        .table tr:nth-child(even) {
            background-color: #748DA680;
        }


        .table-body tr:hover {
            background-color: #748DA6;
        }

    .table-head {
        background-color: #00CC66;
        font-size: 20px;

          position: sticky;
           top: 0;
             
    }

    .table-body {
 
      max-height: 100%;
      border: 1px solid #ddd;
    }



    .my-custom-popup-class {
        background-color: #1E314B !important;
        border-radius: 20px !important;
        border-block: 20px white solid;
        padding-bottom: 10px;
        box-shadow: initial;
        color: white !important; /* White text color */
        font-size: 20px !important;
        font-weight: bold !important;
    }

    .my-custom-title-class {
        color: #fff !important; /* White text color */
    }

    .my-custom-content-class {
    }

    .my-custom-confirm-button-class {
        background-color: blue !important; /* Blue button color */
        font-size: 20px !important;
        padding: 1px,1px,1px,1px !important;
        font-weight: bold;
    }

    .my-custom-cancel-button-class {
        background-color: red !important; /* Red button color */
        font-size: 20px !important;
        padding: 1px,1px,1px,1px !important;
        font-weight: bold;
    }

    .Icon-popup {
        color: red !important;
    }


</style>


@if (personList == null)
{
    <p>Loading...</p>
}
else
{
    <div class="table-container">

        <table class="table">

             <thead class="table-head">
                    <tr>
                        <th>Vorname</th>
                        <th>Nachname</th>
                        <th>Zwischenname</th>
                        <th>Email</th>
                        <th>Telefonnummer</th>
                        <th>Strasse</th>
                        <th>Hausnummer</th>
                        <th>PLZ</th>
                        <th>Stadt</th>
                        <th>Land</th>
                        <th>Gender</th>
                    </tr>
             </thead>

            <tbody class="table-body">

                @foreach (var person in personList)
                {
                    <tr @onclick="@(() => DisplayOption(person))">
                        <td>@person.Vorname
                            <button @onclick="(() => DisplayDetails(person.Id))">Show Details</button>
                        </td>
                        <td>@person.Nachname</td>
                        <td>@person.Zwischenname</td>
                        <td>@person.Email</td>
                        <td>
                            @foreach (var telefonnummer in person.PersonNummern)
                            {
                                <div>@telefonnummer.TelNummer</div>
                            }
                        </td>
@*                         <td>@person.TelNummer</td>
 *@                        <td>@person.Strasse</td>
                        <td>@person.Hausnummer</td>
                        <td>@person.PLZ</td>
                        <td>@person.Stadt</td>
                        <td>@person.Land</td>
                        <td>@person.Gender</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}



@code {

    private void DisplayDetails(int id)
    {
        NavManager.NavigateTo($"/personDisplay/{id}");
    }

    List<PersonModel> personList;
    private string searchText = string.Empty;
    private List<PersonModel> allPersons;
    private List<PersonModel> searchResults;

    private async Task DownloadAsPdf()
    {
        var pgSize = new iTextSharp.text.Rectangle(141.732f, 141.732f);
        Document doc = new Document(pgSize);
        try
        {
            // Create a new PDF document
            Document document = new Document(PageSize.A4, 26, 36, 15, 0);

            MemoryStream memoryStream = new MemoryStream();
            PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);

            document.Open();

            // Add content to the PDF
            PdfPTable table = new PdfPTable(11); // Adjust the number of columns as per your data

            table.WidthPercentage = 90;

            //leave a gap before and after the table
            table.SpacingBefore = 20f;
            table.SpacingAfter = 30f;

            BaseFont bfHelvetica = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
            Font smallFont = new Font(bfHelvetica, 5, Font.NORMAL, BaseColor.BLACK); // Changed font size to 4 and set color to black
            Font boldFont = new Font(bfHelvetica, 5, Font.BOLD, BaseColor.WHITE); // Added bold font for header row

            // Add headers with bold and white font color
            table.AddCell(new PdfPCell(new Phrase("Vorname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Nachname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Zwischenname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Email", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Telefonnummer", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Strasse", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Hausnummer", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("PLZ", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Stadt", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Land", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Gender", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });

            // Add data with small font size and alternating row background colors
            BaseColor evenBgColor = new BaseColor(255, 255, 255); // White background for even rows
            BaseColor oddBgColor = new BaseColor(238, 238, 238); // Light gray background for odd rows

            PdfPCell MakeCell(string phrase, int i) 
                => new PdfPCell(new Phrase(phrase, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) };

            // for(<setup>; <condition>; <update>)
            // setup: executed once at start of loop
            // condition: checked before each loop (only executes loop if true)
            // update: executed before each loop


            //  BAD CODE !!!!
            //  DO NOT WRITE THIS!
            //
            //  var x = 2;
            // x += x++;


            // x += (x++);
            // ||
            // \/
            // x = x + (x++);
            // ||
            // \/
            // y = x + (x);
            // x += 1;
            // x = y;
            // ||
            // \/
            // y = x + x;
            // x = x + 1;
            // x = y;
            // x == 4

            // 'x++' IS EQUIVALENT TO 'x += (1)' IS EQUIVALENT TO 'x = x + (1)'

            // x = 2;
            // x += ++x;
            // ||
            // \/
            // x = x + (++x);
            // ||
            // \/
            // y = x + 1;
            // x = x + y;

            for (int i = 0; i < personList.Count; i++)
            {
                var person = personList[i];

                table.AddCell(MakeCell(person.Vorname, i));
                table.AddCell(new PdfPCell(new Phrase(person.Nachname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Zwischenname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Email, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.TelNummer, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Strasse, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Hausnummer, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.PLZ.ToString(), smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Stadt, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Land, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Gender, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });

                // Set padding to wrap text
                foreach (PdfPCell cell in table.Rows[table.Rows.Count - 1].GetCells())
                {
                    cell.Padding = 5;
                }
            }

            document.Add(table);

            document.Close();

            // Trigger the download
            byte[] data = memoryStream.ToArray();
            await JSRuntime.InvokeVoidAsync("downloadPdf", Convert.ToBase64String(data), "person_data.pdf");
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private async Task DownloadAsJson()
    {
        try
        {
            var transformedList = personList.Select(person => new
            {
                id = person.Id,
                nachname = person.Nachname,
                vorname = person.Vorname,
                zwischenname = person.Zwischenname,
                telefonnummer = person.TelNummer,
                eMail = person.Email,
                strasse = ReplaceUnicodeEscapeSequences(person.Strasse), // Replace Unicode escape sequences
                hausnummer = person.Hausnummer,
                plz = person.PLZ,
                stadt = person.Stadt,
                land = person.Land,
                gender = person.Gender
            }).ToList();

            var jsonContent = JsonConvert.SerializeObject(transformedList, Formatting.Indented);

            var fileName = "person_data.json";

            // var fileService = DependencyService.Get<IFileService>();

            // if (fileService != null)
            // {
            //     await fileService.SaveFileAsync(fileName, Encoding.UTF8.GetBytes(jsonContent));
            // }

            // Create a byte array from the JSON content
            byte[] data = Encoding.UTF8.GetBytes(jsonContent);

            // Trigger the download using JavaScript
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, data);

        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private string ReplaceUnicodeEscapeSequences(string input)
    {
        return Regex.Replace(
            input, 
            @"\\u(?<Value>[a-zA-Z0-9]{4})", 
            m =>
            {
                var x = int.Parse(m.Groups["Value"].Value, System.Globalization.NumberStyles.HexNumber);
                return ((char)x).ToString();
            });
    }

    private void ClearSearchText()
    {
        searchText = "";
        searchResults = null;
    }

    protected override async Task OnInitializedAsync()
    {
        this.allPersons = await PersonService.GetAllPersonsList();

        this.personList = await PersonService.GetAllPersonsList();
    }

    private void HandleSearchTextChanged(ChangeEventArgs e)
    {
        this.searchText = e.Value.ToString();
        this.HandleSearch();
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            searchResults = allPersons
            // .Where(person => person.Nachname.Contains(searchText) || person.Vorname.Contains(searchText))
            // .ToList();
            .Where(person 
                => person.Nachname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0
                || person.Vorname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0)
            .ToList();
        }
        else
        {
            searchResults = null; // Set it to null when search text is empty
        }
    }

    private async void BtnSearch_Clicked()
    {
        string searchText = this.searchText;

        if (!string.IsNullOrEmpty(searchText))
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"Contact with name '{searchText}' does not exist.",
                    Text = "Do you want to add it?",
                    //Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "yes",
                    CancelButtonText = "No",

                    CustomClass = new SweetAlertCustomClass
                    {
                        Popup = "my-custom-popup-class",
                        Title = "my-custom-title-class",
                        Icon = "Icon-popup",
                        Content = "my-custom-content-class",
                        ConfirmButton = "my-custom-confirm-button-class",
                        CancelButton = "my-custom-cancel-button-class"
                    }


                });

            var confrim = !string.IsNullOrEmpty(result.Value); // if value ture means that user clikced on conferm btn.

            if (confrim)
            {
                NavManager.NavigateTo($"addPerson?name={searchText}");
            }

            //     bool addContact = await JSRuntime.InvokeAsync<bool>(
            //         "confirm", 
            //         $"Contact with name '{searchText}' does not exist. Do you want to add it?");

            //     if (addContact)
            //     {
            //         NavManager.NavigateTo($"addPerson?name={searchText}");
            //     }
            // }
            else
            {
              //  await oninitializedasync();
            }
        }
    }

    private async void DisplayOption(PersonModel personDetail)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "options",
                ShowCancelButton = true,
                ShowDenyButton = true,
                ConfirmButtonText = "Update",
                DenyButtonText = "Delete",

                CustomClass = new SweetAlertCustomClass
                {
                    Popup = "my-custom-popup-class",
                    Title = "my-custom-title-class",
                    Icon = "Icon-popup",
                    Content = "my-custom-content-class",
                    ConfirmButton = "my-custom-confirm-button-class",
                    CancelButton = "my-custom-cancel-button-class"
                },

            });

        if (result.IsConfirmed)
        {
            NavManager.NavigateTo($"updatePerson/{personDetail.Id}");

            // if (result.Value == "Update")
            // {
            //     // Handle Update button click
            //     NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
            // }
        }
        if (result.IsDenied)
        {
            DisplayDeleteConfirmation(personDetail.Id);
        }

        else
        {
            // Handle Cancel button click or outside click

        }


        //     var response = await App.Current.MainPage.DisplayActionSheet(
        //         "Select Option",
        //         "Ok",
        //         null,
        //         "Update Contact",
        //         "Delete Contact");

        //     if (response == "Update Contact")
        //     {
        //         NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
        //     }
        //     else if (response == "Delete Contact")
        //     {
        //         DisplayDeleteConfirmation(personDetail.Id);


        //     }
    }

    private async void DisplayDeleteConfirmation(int personId)
    {

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "you sure you want to delete?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "yes",
                CancelButtonText = "No",

                CustomClass = new SweetAlertCustomClass
                {
                    Popup = "my-custom-popup-class",
                    Title = "my-custom-title-class",
                    Icon = "Icon-popup",
                    Content = "my-custom-content-class",
                    ConfirmButton = "my-custom-confirm-button-class",
                    CancelButton = "my-custom-cancel-button-class"
                }


            });

        var confrim = !string.IsNullOrEmpty(result.Value); // if value ture means that user clikced on conferm btn.

        //  bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
        if (confrim)
        {
            var deleteresponse = await PersonService.DeletePerson(new AddUpdatePersonRequest
                {
                    Id = personId
                });

            if (deleteresponse.Success)
            {
                //await ShowDeleteDialog();

                await OnInitializedAsync();

                StateHasChanged();

                if (!string.IsNullOrEmpty(result.Value))
                {
                    await Swal.FireAsync(new SweetAlertOptions
                    {
                            Icon = SweetAlertIcon.Success,
                            Text = "Contact deleted",

                            CustomClass = new SweetAlertCustomClass
                            {

                                Content = "my-custom-content-class",
                                ConfirmButton = "my-custom-confirm-button-class",
                            }

                    });
                }

            }
        }
    }

}






