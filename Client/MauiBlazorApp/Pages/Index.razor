@page "/"
@using MauiBlazorApp.Models
@using MauiBlazorApp.Services
@using System.Text
@using System.IO;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@using Microsoft.JSInterop;
@using Newtonsoft.Json;
@using iTextSharp.text;
@using iTextSharp.text.pdf;
@inject IPersonService PersonService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;

<head>
    <!-- for the deopdown update , delete    -->
    <link rel="stylesheet" href="_content/Blazorise/blazorise.css" />
    <link rel="stylesheet" href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" />

    <script src="_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js"></script>
    <script src="_content/Blazorise/blazorise.js"></script>
    <script src="_content/Blazorise.Bootstrap/blazorise.bootstrap.js"></script>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>

    <script src="exportPdf.js"></script>


</head>

@* <iframe width="560" height="315" src="https://www.youtube.com/embed/m8e-FF8MsqU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
 *@

<h1>Person List</h1>

<div class="input-group mb-3">

    <input type="text" class="form-control" placeholder="Search..." @bind="searchText" @oninput="HandleSearchTextChanged" />

    <button class="btn btn-clear" type="button" @onclick="ClearSearchText"><i class="fas fa-times-circle"> X </i></button>

    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="BtnSearch_Clicked">Search</button>
    </div>

    <div class="btn-group">
        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Exportieren als
        </button>
        <div class="dropdown-menu">
            <button class="dropdown-item" @onclick="DownloadAsJson">JSON</button>
            <button class="dropdown-item" @onclick="DownloadAsPdf">PDF</button>
        </div>
    </div>

</div>

<div class ="search-dropdown">

<div class="dropdown">
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
        @if (searchResults != null)
        {
            @foreach (var person in searchResults)
            {
                <li class="dropdown-item">@person.Nachname</li>
            }
        }

    </ul>
</div>

@if (searchResults != null)
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <td>Nachname</td>
                    <th>Vorname</th>
                    <!-- Add other table headers here -->
                </tr>
            </thead>
            <tbody>
                @foreach (var person in searchResults)
                {

                    <tr @onclick="@( () => DisplayOption(person) )">
                        <td>@person.Nachname</td>
                        <td>@person.Vorname</td>
                        <!-- Add other table data here -->
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
</div>

<style>

    body {
        min-height: 100vh;
    }

    .btn-clear {
        background: none;
        border: none;
        padding: 0.5rem 0.9rem 0.5rem 1rem;
    }

        .btn-clear:hover {
            color: red;
        }

        .btn-clear:focus {
            outline: none;
        }

        .btn-clear i {
            font-size: 30rem;
            border-radius: 50%;
        }

    .input-group-append button:first-child {
        margin-right: 0.5rem;
    }



    .btn-outline-secondary {
        background: none;
        border: groove;
        padding: 0.5rem 0.5rem 0.5rem 0.5rem;
    }

    .btn-outline-secondary {
        color: black;
    }


        .btn-outline-secondary:hover {
            background-color: green;
        }

        .btn-outline-secondary:focus {
            outline: none;
        }

    .btn-clear i {
        font-size: 1rem;
        border-radius: 50%;
    }

    .input-group-append button:first-child {
        margin-right: 0.5rem;
    }




    .btn-primary.btn-sm,
    .btn-danger.btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.30rem;
    }


    .btn-secondary {
        background-color: Highlight;
        border-color: green;
        color: black;
        font-weight: normal;
    }

        .btn-secondary:hover {
            background-color: none;
            border-color: None;
            color: lightblue;
            font-weight: normal;
            border: solid;
        }

        .btn-secondary.active {
            background-color: white;
            border-color: None;
            color: lightblue;
            font-weight: normal;
            border: none
        }

    .dropdown-toggle.btn-secondary {
        background-color: white;
        color: lightblue;
        font-weight: normal;
        border: none
    }

        .dropdown-toggle.btn-secondary:not([disabled]):not(.disabled).active:focus {
            box-shadow: none;
        }

        .dropdown-toggle.btn-secondary:focus {
            box-shadow: none;
            background-color: green;
        }
</style>

@if (_PersonList == null)
{
    <p>Loading...</p>
}

else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Vorname</th>
                    <td>Nachname</td>
                    <td>Zwischenname</td>
                    <td>Email</td>
                    <td>Telefonnummer</td>
                    <td>Strasse</td>
                    <td>Hausnummer</td>
                    <td>PLZ</td>
                    <td>Stadt</td>
                    <td>Land</td>
                    <td>Gender</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in _PersonList)
                {
                    <tr @onclick="@(() => DisplayOption(person))">
                        <td>@person.Vorname</td>
                        <td>@person.Nachname</td>
                        <td>@person.Zwischenname</td>
                        <td>@person.Email</td>
                        <td>@person.Telefonnummer</td>
                        <td>@person.Strasse</td>
                        <td>@person.Hausnummer</td>
                        <td>@person.PLZ</td>
                        <td>@person.Stadt</td>
                        <td>@person.Land</td>
                        <td>@person.Gender</td>
                        <td>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
}

<script>
    window.BlazorDownloadFile = (fileName, data) => {
        const blob = new Blob([new Uint8Array(data)], { type: 'application/json' });
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>

@code {

    List<PersonModel> _PersonList;
    private string searchText = string.Empty;
    private List<PersonModel> allPersons;
    private List<PersonModel> searchResults;

    private async Task DownloadAsPdf()
    {
        var pgSize = new iTextSharp.text.Rectangle(141.732f, 141.732f);
        Document doc = new Document(pgSize);
        try
        {
            // Create a new PDF document
            Document document = new Document(PageSize.A4, 26, 36, 15, 0);

            MemoryStream memoryStream = new MemoryStream();
            PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);

            document.Open();

            // Add content to the PDF
            PdfPTable table = new PdfPTable(11); // Adjust the number of columns as per your data

            table.WidthPercentage = 90;

            //leave a gap before and after the table
            table.SpacingBefore = 20f;
            table.SpacingAfter = 30f;

            BaseFont bfHelvetica = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
            Font smallFont = new Font(bfHelvetica, 5, Font.NORMAL, BaseColor.BLACK); // Changed font size to 4 and set color to black
            Font boldFont = new Font(bfHelvetica, 5, Font.BOLD, BaseColor.WHITE); // Added bold font for header row

            // Add headers with bold and white font color
            table.AddCell(new PdfPCell(new Phrase("Vorname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Nachname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Zwischenname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Email", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Telefonnummer", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Strasse", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Hausnummer", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("PLZ", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Stadt", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Land", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Gender", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });

            // Add data with small font size and alternating row background colors
            BaseColor evenBgColor = new BaseColor(255, 255, 255); // White background for even rows
            BaseColor oddBgColor = new BaseColor(238, 238, 238); // Light gray background for odd rows
            for (int i = 0; i < _PersonList.Count; i++)
            {
                var person = _PersonList[i];

                table.AddCell(new PdfPCell(new Phrase(person.Vorname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Nachname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Zwischenname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Email, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Telefonnummer, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Strasse, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Hausnummer, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.PLZ.ToString(), smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Stadt, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Land, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Gender, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });

                // Set padding to wrap text
                foreach (PdfPCell cell in table.Rows[table.Rows.Count - 1].GetCells())
                {
                    cell.Padding = 5;
                }
            }

            document.Add(table);

            document.Close();

            // Trigger the download
            byte[] data = memoryStream.ToArray();
            await JSRuntime.InvokeVoidAsync("downloadPdf", Convert.ToBase64String(data), "person_data.pdf");
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private async Task DownloadAsJson()
    {
        try
        {
            var transformedList = _PersonList.Select(person => new
            {
                id = person.Id,
                nachname = person.Nachname,
                vorname = person.Vorname,
                zwischenname = person.Zwischenname,
                telefonnummer = person.Telefonnummer,
                eMail = person.Email,
                strasse = ReplaceUnicodeEscapeSequences(person.Strasse), // Replace Unicode escape sequences
                hausnummer = person.Hausnummer,
                plz = person.PLZ,
                stadt = person.Stadt,
                land = person.Land,
                gender = person.Gender
            }).ToList();

            var jsonContent = JsonConvert.SerializeObject(transformedList, Formatting.Indented);

            var fileName = "person_data.json";

            // Create a byte array from the JSON content
            byte[] data = Encoding.UTF8.GetBytes(jsonContent);

            // Trigger the download
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, data);

        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private string ReplaceUnicodeEscapeSequences(string input)
    {
        return Regex.Replace(input, @"\\u(?<Value>[a-zA-Z0-9]{4})", m =>
        {
            return ((char)int.Parse(m.Groups["Value"].Value, System.Globalization.NumberStyles.HexNumber)).ToString();
        });
    }

    private void ClearSearchText()
    {
        searchText = "";
        searchResults = null;
    }

    protected override async Task OnInitializedAsync()
    {
        allPersons = await PersonService.GetAllPersonsList();

        _PersonList = await PersonService.GetAllPersonsList();
    }

    private void HandleSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        HandleSearch();
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            searchResults = allPersons
            // .Where(person => person.Nachname.Contains(searchText) || person.Vorname.Contains(searchText))
            // .ToList();
            .Where(person =>
            person.Nachname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0
            || person.Vorname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0)
            .ToList();
        }
        else
        {
            searchResults = null; // Set it to null when search text is empty
        }
    }

    private async void BtnSearch_Clicked()
    {
        string searchText = this.searchText;

        if (!string.IsNullOrEmpty(searchText))
        {

            {
                bool addContact = await JSRuntime.InvokeAsync<bool>("confirm", $"Contact with name '{searchText}' does not exist. Do you want to add it?");

                if (addContact)
                {
                    NavManager.NavigateTo($"addPerson?name={searchText}");
                }
            }
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    private async void DisplayOption(PersonModel personDetail)
    {

        var response = await App.Current.MainPage.DisplayActionSheet("Select Option", "Ok", null, "Update Contact", "Delete Contact");

        if (response == "Update Contact")

        {
            NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
        }
        else if (response == "Delete Contact")

        {
            DisplayDeleteConfirmation(personDetail.Id);


        }
    }

    private async void DisplayDeleteConfirmation(int personId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
        if (confirmed)
        {
            var deleteresponse = await PersonService.DeletePerson(new AddUpdatePersonRequest
                {
                    Id = personId
                });

            if (deleteresponse.Success)
            {

                await OnInitializedAsync();
                StateHasChanged();

                await App.Current.MainPage.DisplayActionSheet("Success", "Ok", null, "Contact Deleted ");
            }
        }
    }

}






