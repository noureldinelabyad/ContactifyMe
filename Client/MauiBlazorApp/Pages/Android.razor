@page "/android"
@using CommonCode.Models
@using CommonCode.Services
@using CurrieTechnologies.Razor.SweetAlert2;


@inject SweetAlertService Swal    // sweet alert call it Swal
@inject CommonCode.Services.IPersonService PersonService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager;

<head>

    <script src="_content/Microsoft.AspNetCore.Components.WebAssembly.Authentication/AuthenticationService.js"></script>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>

    <script src="exportPdf.js"></script>

</head>

<div class="header">

    <div class="search-bar-container">

        <span class="personList">Personen Liste</span>

        <div class="search-bar-wrapper">

            <input type="text" @bind="searchText" @oninput="HandleSearchTextChanged" class="search-bar"
                   placeholder="SUCHE" aria-label="Search" aria-describedby="search-addon" />

            <div class="btn-container">

                @if (!string.IsNullOrEmpty(searchText))
                {
                    <button class="btn-clear" type="button" @onclick="ClearSearchText">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                             class="i-clear" viewBox="0 0 20 20 ">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293z" />
                        </svg>
                    </button>
                }
                <button class="search-btn" type="button" @onclick="BtnSearch_Clicked">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                         class="i-search" viewBox="0 0 20 20">
                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                    </svg>
                </button>

            </div>

        </div>

    </div>

</div>


@if (searchResults != null)
{
    <table class="table">
        <thead>
            <tr>
                <td>Nachname</td>
                <th>Vorname</th>
                <!-- Add other table headers here -->
            </tr>
        </thead>
        <tbody>
            @foreach (var person in searchResults)
            {
                @*                     <tr @onclick="@( () => DisplayOption(person) )">

        *@
                @*                     <tr @onclick="@( () => DisplayOption(person) )">
        *@
                <tr @onclick="@(() => DisplayDetails(person.Id))">
                    <td>@person.Nachname</td>
                    <td>@person.Vorname</td>
                    <!-- Add other table data here -->
                </tr>
            }
        </tbody>
    </table>
}

@if (PersonList == null)
{
    <p>Loading...</p>
}
else
{
    <div classs="names">

        @foreach (var person in PersonList)
        {
            <div class="card">
                <div class="card-body">
                    <div class="person-item" @onclick="@(() => DisplayDetails(person.Id))">

                        <div class="person-name">
                            <span class="person-vorname">@person.Vorname</span>
                            <span class="person-nachname">@person.Nachname</span>
                        </div>

                        @* @foreach (var telefonnummer in person.PersonNummern)
                {
                <div>@telefonnummer.TelNummer</div>
                } *@

                        @if (person.PersonNummern.Any())
                        {
                            var firstNumber = person.PersonNummern.First().TelNummer;
                            if (person.PersonNummern.Count > 1)
                            {
                                var secondNumber = person.PersonNummern[1].TelNummer.Substring(0, Math.Min(5, person.PersonNummern[1].TelNummer.Length));
                                <div>@firstNumber<br />@secondNumber...</div>
                            }
                            else
                            {
                                <div>@firstNumber</div>
                            }
                        }
                        <span class="person-email"> @person.Email  </span>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {

    private void DisplayDetails(int id)
    {
        NavManager.NavigateTo($"/personDisplay/{id}");
    }


    private void ClearSearchText()
    {
        searchText = "";
    }

    List<PersonModel> PersonList;

    private string searchText = string.Empty;
    private List<PersonModel> allPersons;
    private List<PersonModel> searchResults;

    protected override async Task OnInitializedAsync()
    {
        allPersons = await PersonService.GetAllPersonsList();

        PersonList = await PersonService.GetAllPersonsList();

    }

    private void HandleSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        HandleSearch();
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            searchResults = allPersons
            // .Where(person => person.Nachname.Contains(searchText) || person.Vorname.Contains(searchText))
            // .ToList();
            .Where(person =>
            person.Nachname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0
            || person.Vorname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0)
            .ToList();
        }
        else
        {
            searchResults = null; // Set it to null when search text is empty
        }
    }

    private async void BtnSearch_Clicked()
    {
        string searchText = this.searchText;

        if (!string.IsNullOrEmpty(searchText))
        {
            // var results = await PersonService.SearchPersonsByName(searchText);

            // if (results.Count > 0)
            // {
            //     searchResults = results;
            // }
            // else
            {
                bool addContact = await JSRuntime.InvokeAsync<bool>("confirm", $"Contact with name '{searchText}' does not exist. Do you want to add it?");

                if (addContact)
                {
                    NavManager.NavigateTo($"addPerson?name={searchText}");
                }
            }
        }
        else
        {
            await OnInitializedAsync();
        }
    }


    private void DisplayUpdate(int personId)
    {
        NavManager.NavigateTo($"updatePerson/{personId}");
    }

    private async void DisplayDeleteConfirmation(int personId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
        if (confirmed)
        {
            var deleteresponse = await PersonService.DeletePerson(personId
                // {
                //     Id = personId
                // }
                );

            if (deleteresponse.Success)
            {
                await OnInitializedAsync();
                StateHasChanged();
            }
        }
    }

    // private async void DisplayOption(PersonModel personDetail)
    // {

    //     //     // var response = await App.Current.MainPage.DisplayActionSheet("Select Option", "Ok", null, "Update Contact", "Delete Contact");

    //     //     // if (response == "Update Contact")

    //     //     // {
    //     //     //     NavManager.NavigateTo($"updatePerson/{personDetail.Id}");

    //     //     // }
    //     //     // else if (response == "Delete Contact")

    //     //     // {

    //     //     //        DisplayDeleteConfirmation(personDetail.Id);




    // }


    [Parameter] public EventCallback<bool> OnConfirmation { get; set; }

    private async Task ConfirmDelete()
    {
        await OnConfirmation.InvokeAsync(true);
    }
}





