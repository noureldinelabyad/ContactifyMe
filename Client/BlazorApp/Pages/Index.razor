@page "/"
@using CommonCode.Models
@using CommonCode.Services
@using System.Text
@using System.IO;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.JSInterop;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components;
@using iTextSharp.text;
@using iTextSharp.text.pdf;
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Mvc
@using System.Net.Http.Json

@inject SweetAlertService Swal    // sweet alert call it Swal
@inject IPersonService PersonService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager


<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    <script src="exportPdf.js"></script>
    <script src="_content/CurrieTechnologies.Razor.SweetAlert2/sweetAlert2.min.js"></script>

</head>

<div class="header">

    <div class="search-bar-container">
        <span class="personList">Personen Liste</span>

        <div class="search-bar-wrapper">

            <input type="text" @bind="searchText" @oninput="HandleSearchTextChanged" class="search-bar"
                   placeholder="SUCHE" aria-label="Search" aria-describedby="search-addon" />

            <div class="btn-container">

                @if (!string.IsNullOrEmpty(searchText))
                {
                    <button class="btn-clear" type="button" @onclick="ClearSearchText">
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor"
                             class="i-clear" viewBox="0 0 20 20 ">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293z" />
                        </svg>
                    </button>
                }
                <button class="search-btn" type="button" @onclick="BtnSearch_Clicked">
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor"
                         class="i-search" viewBox="0 0 20 20">
                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                    </svg>
                </button>

            </div>


        </div>
        <div class="dropdown">

            <!-- Dropdown export -->
            <button class="dropbtn" @onclick="OpenExport">
                <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor"
                     class="i-export" viewBox="0 0 17 17">
                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5" />
                    <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z" />
                </svg>
                Exportieren
            </button>

            @if (showExport)
            {
                <div class="dropdown-content">
                    <button class="dropdown-item" @onclick="DownloadAsJson">JSON</button>
                    <button class="dropdown-item" @onclick="DownloadAsPdf">PDF</button>
                </div>
            }

            <!-- Popup import  -->
            <button @onclick="OpenPopup" class="popupbtn">
                Importieren
                <svg xmlns="http://www.w3.org/2000/svg"
                     width="25" height="25" fill="currentColor" class="i-import" viewBox="0 0 17 17">
                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5" />
                    <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708z" />
                </svg>
            </button>

            <!-- Popup import content -->
            @if (showPopup)
            {
                <div class="my-custom-popup-import">

                    <div class="my-custom-title-class">
                        Import json
                    </div>

                    <div class="filecontainer">
                        <!-- Input file and import button -->
                        <InputFile OnChange="HandleFileSelected" class="filecontainer" />
                    </div>

                    <div class="my-Strategy-class">
                        <!-- Add a dropdown to choose the update strategy -->
                        <label for="updateStrategy">Choose Update Strategy:</label>
                        <select class="selector" @bind="selectedUpdateStrategy" id="updateStrategy">
                            <option class="option" value="0">Add</option>
                            <option class="option" value="4">Update</option>
                        </select>

                    </div>

                    <button @onclick="ImportJson" class="my-custom-confirm-button-class">Import</button>
                    <button @onclick="()=> showPopup = false" class="my-custom-cancel-button-class">Cancel</button>
                </div>
            }
        </div>


    </div>

</div>

<div class="search-dropdown">

    <div class="dropdown">
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            @if (searchResults != null)
            {
                @foreach (var person in searchResults)
                {
                    <li class="dropdown-item">@person.Nachname</li>
                }
            }
        </ul>
    </div>

    @if (searchResults != null)
    {
        <div class="table-container">
            <table class="table">
                <thead class="table-head-s">
                    <tr>
                        <th>Vorname</th>
                        <th>Nachname</th>
                        <th>Mittelname</th>
                        <th>Gender</th>
                        <th>Email</th>
                        <th>TelNummer</th>
                        <th>Straße</th>
                        <th>Nr.</th>
                        <th>Stadt</th>
                        <th>PLZ</th>
                        <th>Land</th>
                    </tr>
                </thead>
                <tbody class="table-body">
                    @foreach (var person in searchResults)
                    {
                        <tr @onclick="(() => DisplayDetails(person.Id))"
                            @oncontextmenu:preventDefault="true"
                            @oncontextmenu="((e) => DisplayOption(e, person))">
                            <td>@person.Vorname </td>
                            <td> @person.Nachname </td>
                            <td>@person.Zwischenname</td>
                            <td>@person.Gender</td>
                            <td>@person.Email</td>
                            <td>
                                @if (person.PersonNummern.Any())
                                {
                                    var firstNumber = person.PersonNummern.First().TelNummer;
                                    if (person.PersonNummern.Count > 1)
                                    {
                                        var secondNumber = person.PersonNummern[1].TelNummer.Substring(0, Math.Min(5, person.PersonNummern[1].TelNummer.Length));
                                        @* <div>@firstNumber<br />@secondNumber...</div> *@
                                        <div>@firstNumber /***</div>
                                    }
                                    else
                                    {
                                        <div>@firstNumber</div>
                                    }
                                }
                            </td>
                            <td>@person.Strasse</td>
                            <td>@person.Hausnummer</td>
                            <td>@person.Stadt</td>
                            <td>@person.PLZ</td>
                            <td>@person.Land</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<div class="table-page">

    @if (_PersonList == null)
    {
        <div class="loading">

            <p>Loading...</p>

            <button class="btn btn-primary" type="button" disabled>
                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                <span class="visually-hidden" role="status">Loading...</span>
            </button>

            <button class="btn btn-primary" type="button" disabled>
                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                <span role="status">Loading...</span>
            </button>

        </div>
    }
    else
    {
        <div class="table-container">
            <table class="table">
                <thead class="table-head">
                    <tr>
                        <th>Vorname</th>
                        <th>Nachname</th>
                        <th>Mittelname</th>
                        <th>Gender</th>
                        <th>Email</th>
                        <th>TelNummer</th>
                        <th>Straße</th>
                        <th>Nr.</th>
                        <th>Stadt</th>
                        <th>PLZ</th>
                        <th>Land</th>
                    </tr>
                </thead>

                <tbody class="table-body">
                    @foreach (var person in _PersonList)
                    {
                        <tr @onclick="(() => DisplayDetails(person.Id))"
                            @oncontextmenu:preventDefault="true"
                            @oncontextmenu="((e) => DisplayOption(e, person))">
                            <td>@person.Vorname </td>
                            <td> @person.Nachname </td>
                            <td>@person.Zwischenname</td>
                            <td>@person.Gender</td>
                            <td>@person.Email</td>
                            <td>
                                @if (person.PersonNummern.Any())
                                {
                                    var firstNumber = person.PersonNummern.First().TelNummer;
                                    if (person.PersonNummern.Count > 1)
                                    {
                                        var secondNumber = person.PersonNummern[1].TelNummer.Substring(0, Math.Min(5, person.PersonNummern[1].TelNummer.Length));
                                        <div>@firstNumber /***</div>
                                    }
                                    else
                                    {
                                        <div>@firstNumber</div>
                                    }
                                }
                            </td>
                            <td>@person.Strasse</td>
                            <td>@person.Hausnummer</td>
                            <td>@person.Stadt</td>
                            <td>@person.PLZ</td>
                            <td>@person.Land</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


@code {

    private bool showPopup = false;
    private bool showExport = false;
    private IBrowserFile jsonFile;
    private string jsonContent;
    private string selectedUpdateStrategy = "4"; // Default to "update"

    private void OpenPopup()
    {
        showPopup = !showPopup; // Toggle showPopup between true and false

    }

    private void OpenExport()
    {
        showExport = !showExport;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        jsonFile = e.File;

        if (jsonFile != null)
        {
            var stream = jsonFile.OpenReadStream();
            var reader = new StreamReader(stream);
            jsonContent = await reader.ReadToEndAsync();
        }
    }

    private async Task ImportJson()
    {
        var updateStrategy = (UpdateStrategy)Enum.Parse(typeof(UpdateStrategy), selectedUpdateStrategy);

        if (!string.IsNullOrEmpty(jsonContent))
        {
            var result = await PersonService.ADDJsonAsync(jsonContent, updateStrategy);

            if (result.Success)
            {
                // Import successful, handle UI updates or redirection
                //  show a success message or refresh the UI
                // redirect to the list page after import
                NavManager.NavigateTo("/");
                showPopup = false;
                // Reload or refresh the page
                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Import Succesed",
                        Text = $"{result.Message}",
                        Icon = SweetAlertIcon.Success
                    });
            }
            else
            {
                // Import failed, handle error
                //  show an error message to the user
                // display a modal or toast with the error message
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Import Failed",
                        Text = $"Error: {result.Message}",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        else
        {
            // JSON content is empty, show validation error
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Validation Error",
                    Text = "Please select a file",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private void DisplayDetails(int id)
    {
        NavManager.NavigateTo($"/personDisplay/{id}");     //navigate to Person display
    }

    List<PersonModel> _PersonList;
    private string searchText = string.Empty;
    private List<PersonModel> allPersons;
    private List<PersonModel> searchResults;

    private async Task DownloadAsPdf()
    {
        var pgSize = new iTextSharp.text.Rectangle(141.732f, 141.732f);
        Document doc = new Document(pgSize);
        try
        {
            // Create a new PDF document
            Document document = new Document(PageSize.A4, 26, 36, 15, 0);

            MemoryStream memoryStream = new MemoryStream();
            PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);

            document.Open();

            // Add content to the PDF
            PdfPTable table = new PdfPTable(11); // Adjust the number of columns as per your data

            table.WidthPercentage = 90;

            //leave a gap before and after the table
            table.SpacingBefore = 20f;
            table.SpacingAfter = 30f;

            BaseFont bfHelvetica = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
            Font smallFont = new Font(bfHelvetica, 5, Font.NORMAL, BaseColor.BLACK); // Changed font size to 4 and set color to black
            Font boldFont = new Font(bfHelvetica, 5, Font.BOLD, BaseColor.WHITE); // Added bold font for header row

            // Add headers with bold and white font color
            table.AddCell(new PdfPCell(new Phrase("Vorname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Nachname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Zwischenname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Email", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Telefonnummer", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Strasse", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Hausnummer", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("PLZ", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Stadt", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Land", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Gender", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });

            // Add data with small font size and alternating row background colors
            BaseColor evenBgColor = new BaseColor(255, 255, 255); // White background for even rows
            BaseColor oddBgColor = new BaseColor(238, 238, 238); // Light gray background for odd rows
            for (int i = 0; i < _PersonList.Count; i++)
            {
                var person = _PersonList[i];

                table.AddCell(new PdfPCell(new Phrase(person.Vorname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Nachname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Zwischenname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Email, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                var telefonnummern = string.Join(", ", person.PersonNummern.Select(p => p.TelNummer));
                table.AddCell(new PdfPCell(new Phrase(telefonnummern, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Strasse, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Hausnummer, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.PLZ.ToString(), smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Stadt, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Land, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Gender, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });

                // Set padding to wrap text
                foreach (PdfPCell cell in table.Rows[table.Rows.Count - 1].GetCells())
                {
                    cell.Padding = 5;
                }
            }

            document.Add(table);

            document.Close();

            // Trigger the download
            byte[] data = memoryStream.ToArray();
            await JSRuntime.InvokeVoidAsync("downloadPdf", Convert.ToBase64String(data), "person_data.pdf");
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private async Task DownloadAsJson()
    {
        try
        {
            var transformedList = _PersonList.Select(person => new
            {
                id = person.Id,
                nachname = person.Nachname,
                vorname = person.Vorname,
                zwischenname = person.Zwischenname,
                personNummern = person.PersonNummern,
                eMail = person.Email,
                strasse = ReplaceUnicodeEscapeSequences(person.Strasse), // Replace Unicode escape sequences
                hausnummer = person.Hausnummer,
                plz = person.PLZ,
                stadt = person.Stadt,
                land = person.Land,
                gender = person.Gender
            }).ToList();

            var jsonContent = JsonConvert.SerializeObject(transformedList, Formatting.Indented);

            var fileName = "person_data.json";

            // Create a byte array from the JSON content
            byte[] data = Encoding.UTF8.GetBytes(jsonContent);

            // Trigger the download
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, data);

        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private string ReplaceUnicodeEscapeSequences(string input)
    {
        return Regex.Replace(input, @"\\u(?<Value>[a-zA-Z0-9]{4})", m =>
        {
            return ((char)int.Parse(m.Groups["Value"].Value, System.Globalization.NumberStyles.HexNumber)).ToString();
        });
    }

    private void ClearSearchText()
    {
        searchResults = null;      //hide the search results
        searchText = "";           //delete the search txt
    }

    protected override async Task OnInitializedAsync()
    {
        allPersons = await PersonService.GetAllPersonsList();
        _PersonList = await PersonService.GetAllPersonsList();

    }

    private void HandleSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        HandleSearch();
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            searchText = searchText.Trim();

            // Filter persons based on search text
            searchResults = _PersonList
            .Where(person =>
                (person.Vorname + " " + person.Nachname + person.Email + " " + person.Strasse + " " + person.Hausnummer + " " + person.Stadt + " " + person.PLZ + " " + person.Land)
                    .IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0) 
 
            .ToList();

            // Mark the matching persons as search results
            foreach (var person in _PersonList)
            {
                person.IsSearchResult = searchResults.Contains(person);
            }
        }
        else
        {
            // Clear search results when search text is empty
            searchResults = null;

            // Reset the IsSearchResult property for all persons
            foreach (var person in _PersonList)
            {
                person.IsSearchResult = false;
            }
        }
    }

    private async Task BtnSearch_Clicked()
    {
        if (!string.IsNullOrEmpty(searchText))
        {
            // Check if there are any matching results
            if (searchResults != null && searchResults.Any())
            {
                // Highlight the matching results
                foreach (var person in searchResults)
                {
                    person.IsSearchResult = true;
                }
            }
            else
            {
                // Show alert if there are no matching results
                var result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = $"Contact with name '{searchText}' does not exist.",
                        Text = "Do you want to add it?",
                        ShowCancelButton = true,
                        ConfirmButtonText = "Yes",
                        CancelButtonText = "No",

                        CustomClass = new SweetAlertCustomClass
                        {
                            Popup = "my-custom-popup-class",
                            Title = "my-custom-title-class",
                            Icon = "Icon-popup",
                            Content = "my-custom-content-class",
                            ConfirmButton = "my-custom-confirm-button-class",
                            CancelButton = "my-custom-cancel-button-class"
                        }
                    });

                if (!string.IsNullOrEmpty(result.Value))
                {
                    NavManager.NavigateTo($"addPerson?name={searchText}");
                }
            }
        }
    }

    private void DisplayUpdate(int personId)
    {
        NavManager.NavigateTo($"updatePerson/{personId}");

    }

    private async Task DisplayOption(MouseEventArgs e, PersonModel personDetail)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Person ID:{personDetail.Id}, {personDetail.Vorname} {personDetail.Nachname} ",
                ShowCancelButton = true,
                ShowDenyButton = true,
                ConfirmButtonText = "Update",
                DenyButtonText = "Delete",
                CancelButtonText = "Close",

                CustomClass = new SweetAlertCustomClass
                {
                    Popup = "my-custom-popup-class",
                    Title = "my-custom-title-class",
                    Icon = "Icon-popup",
                    Content = "my-custom-content-class",
                    ConfirmButton = "my-custom-confirm-button-class",
                    DenyButton = "my-custom-cancel-button-class"
                },
            });

        if (result.IsConfirmed)
        {
            NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
        }
        if (result.IsDenied)
        {
            DisplayDeleteConfirmation(personDetail.Id, personDetail);
        }
    }

    private async void DisplayDeleteConfirmation(int personId, PersonModel personDetail)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = $"you sure you want to delete Person ID:{personDetail.Id} {personDetail.Vorname} {personDetail.Nachname}? ",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "yes",
                CancelButtonText = "No",

                CustomClass = new SweetAlertCustomClass
                {
                    Popup = "my-custom-popup-class",
                    Title = "my-custom-title-class",
                    Icon = "Icon-popup",
                    Content = "my-custom-content-class",
                    ConfirmButton = "my-custom-confirm-button-class",
                    CancelButton = "my-custom-cancel-button-class"
                }
            });

        var confrim = !string.IsNullOrEmpty(result.Value); // if value ture means that user clikced on conferm btn.

        if (confrim)
        {
            var deleteresponse = await PersonService.DeletePerson(personId);

            if (deleteresponse.Success)
            {
                await OnInitializedAsync();

                StateHasChanged();

                if (!string.IsNullOrEmpty(result.Value))
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Icon = SweetAlertIcon.Success,
                            Text = "Contact deleted",

                            CustomClass = new SweetAlertCustomClass
                            {
                                Content = "my-custom-content-class",
                                ConfirmButton = "my-custom-confirm-button-class",
                            }
                        });
                }

            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Icon = SweetAlertIcon.Error,
                        Text = "something went wrong :(",

                        CustomClass = new SweetAlertCustomClass
                        {
                            Content = "my-custom-content-class",
                            ConfirmButton = "my-custom-confirm-button-class",
                        }


                    });
            }
        }
    }

}




