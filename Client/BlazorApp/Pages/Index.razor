@page "/"
@using CommonCode.Models
@using CommonCode.Services
@using System.Text
@using System.IO;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.JSInterop;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components;
@using iTextSharp.text;
@using iTextSharp.text.pdf;

@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Mvc
@using System.Net.Http.Json

@inject SweetAlertService Swal    // sweet alert call it Swal
@inject IPersonService PersonService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IPersonService personService



<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>

    <script src="exportPdf.js"></script>

    <script src="_content/CurrieTechnologies.Razor.SweetAlert2/sweetAlert2.min.js"></script>

</head>


<div class="header">

    <div class="search-bar-container">
        <span class="personList">Personen Liste</span>

        <div class="search-bar-wrapper">

            <input type="text" @bind="searchText" @oninput="HandleSearchTextChanged" class="search-bar"
                   placeholder="SUCHE" aria-label="Search" aria-describedby="search-addon" />

            <div class="btn-container">

                @if (!string.IsNullOrEmpty(searchText))
                {
                    <button class="btn-clear" type="button" @onclick="ClearSearchText">
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor"
                             class="i-clear" viewBox="0 0 20 20 ">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293z" />
                        </svg>
                    </button>
                }
                <button class="search-btn" type="button" @onclick="BtnSearch_Clicked">
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor"
                         class="i-search" viewBox="0 0 20 20">
                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                    </svg>
                </button>

            </div>


        </div>
        <div class="dropdown">

            <!-- Dropdown export -->
            <button class="dropbtn" @onclick="OpenExport">
                <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor"
                     class="i-export" viewBox="0 0 17 17">
                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5" />
                    <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z" />
                </svg>
                Exportieren
            </button>

            @if (showExport)
            {
                <div class="dropdown-content">
                    <button class="dropdown-item" @onclick="DownloadAsJson">JSON</button>
                    <button class="dropdown-item" @onclick="DownloadAsPdf">PDF</button>
                </div>
            }

            <!-- Popup import  -->
            <button @onclick="OpenPopup" class="popupbtn">
                Importieren
                <svg xmlns="http://www.w3.org/2000/svg"
                     width="25" height="25" fill="currentColor" class="i-import" viewBox="0 0 17 17">
                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5" />
                    <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708z" />
                </svg>
            </button>

            <!-- Popup import content -->
            @if (showPopup)
            {
                <div class="my-custom-popup-import">

                    <div class="my-custom-title-class">
                        Import json
                    </div>

                    <div class="filecontainer">
                        <!-- Input file and import button -->
                        <InputFile OnChange="HandleFileSelected" class="filecontainer" />
                    </div>

                    <div class="my-Strategy-class">
                        <!-- Add a dropdown to choose the update strategy -->
                        <label for="updateStrategy">Choose Update Strategy:</label>
                        <select class="selector" @bind="selectedUpdateStrategy" id="updateStrategy">
                            <option value="0">Skip</option>
                            <option value="1">Merge Skip</option>
                            <option value="2">Merge Replace</option>
                            <option value="3">Replace</option>
                            <option value="4">Update</option>
                        </select>

                    </div>

                    <button @onclick="ImportJson" class="my-custom-confirm-button-class">Import</button>
                    <button @onclick="()=> showPopup = false" class="my-custom-cancel-button-class">Cancel</button>
                </div>
            }
        </div>


    </div>

</div>

<div class="search-dropdown">

    <div class="dropdown">
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            @if (searchResults != null)
            {
                @foreach (var person in searchResults)
                {
                    <li class="dropdown-item">@person.Nachname</li>
                }
            }
        </ul>
    </div>

    @if (searchResults != null)
    {
        <div class="table-container">
            <table class="table">
                <thead class="table-head-s">
                    <tr>
                        <th>Vorname</th>
                        <th>Nachname</th>
                        <th>Zwischenname</th>
                        <th>Email</th>
                        <th>Telefonnummer</th>
                        <th>Strasse</th>
                        <th>Hausnummer</th>
                        <th>PLZ</th>
                        <th>Stadt</th>
                        <th>Land</th>
                        <th>Gender</th>
                    </tr>
                </thead>
                <tbody class="table-body-s">
                    @foreach (var person in searchResults)
                    {

                        <tr @onclick="(() => DisplayDetails(person.Id))">
                            <td>@person.Vorname </td>
                            <td> @person.Nachname </td>
                            <td>@person.Zwischenname</td>
                            <td>@person.Email</td>
                            <td>
                                @if (person.PersonNummern.Any())
                                {
                                    var firstNumber = person.PersonNummern.First().TelNummer;
                                    if (person.PersonNummern.Count > 1)
                                    {
                                        var secondNumber = person.PersonNummern[1].TelNummer.Substring(0, Math.Min(5, person.PersonNummern[1].TelNummer.Length));
                                        @* <div>@firstNumber<br />@secondNumber...</div> *@
                                        <div>@firstNumber /***</div>
                                    }
                                    else
                                    {
                                        <div>@firstNumber</div>
                                    }
                                }
                            </td>
                            <td>@person.Strasse</td>
                            <td>@person.Hausnummer</td>
                            <td>@person.PLZ</td>
                            <td>@person.Stadt</td>
                            <td>@person.Land</td>
                            <td>@person.Gender</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<div class="table-page">

    @if (_PersonList == null)
    {
        <div class="loading">

            <p>Loading...</p>

            <button class="btn btn-primary" type="button" disabled>
                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                <span class="visually-hidden" role="status">Loading...</span>
            </button>

            <button class="btn btn-primary" type="button" disabled>
                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                <span role="status">Loading...</span>
            </button>

        </div>

    }
    else
    {
        <div class="table-container">
            <table class="table">
                <thead class="table-head">
                    <tr>
                        <th>Vorname</th>
                        <th>Nachname</th>
                        <th>Mittelname</th>
                        <th>Gender</th>
                        <th>Email</th>
                        <th>Telefonnummer</th>
                        <th>Strasse</th>
                        <th>Nr.</th>
                        <th>Stadt</th>
                        <th>PLZ</th>
                        <th>Land</th>
                    </tr>
                </thead>

                <tbody class="table-body">
                    @foreach (var person in _PersonList)
                    {
                        <tr @onclick="(() => DisplayDetails(person.Id))">
                            <td>@person.Vorname </td>
                            <td> @person.Nachname </td>
                            <td>@person.Zwischenname</td>
                            <td>@person.Gender</td>
                            <td>@person.Email</td>
                            <td>
                                @if (person.PersonNummern.Any())
                                {
                                    var firstNumber = person.PersonNummern.First().TelNummer;
                                    if (person.PersonNummern.Count > 1)
                                    {
                                        var secondNumber = person.PersonNummern[1].TelNummer.Substring(0, Math.Min(5, person.PersonNummern[1].TelNummer.Length));
                                        @* <div>@firstNumber<br />@secondNumber...</div> *@
                                        <div>@firstNumber /***</div>
                                    }
                                    else
                                    {
                                        <div>@firstNumber</div>
                                    }
                                }
                            </td>
                            <td>@person.Strasse</td>
                            <td>@person.Hausnummer</td>
                            <td>@person.Stadt</td>
                            <td>@person.PLZ</td>
                            <td>@person.Land</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


<!-------------------------------------------------------------Header Styles ---------------------------------------------------------------------->
<style>

    .header {
        padding: 10px 16px;
        background: white;
        width: 100%;
        padding-bottom: 20px;
        top: 0;
        z-index: 20;
        position: fixed;
        margin-left: -20px;
        
    }

    .personList {
        font: normal bold 30px/38px Arial;
        color: #17324D;
    }

    .search-bar-container {
        padding-top: 20px;
        position: relative;
        width: 100%;
    }

    .search-bar-wrapper {
        padding-top: 20px;
        position: relative;
        display: flex;
        width: 20%;
    }

    .search-bar {
        border: 1px solid #B2C2D1;
        font-size: x-large;
        width: 100%;
        height: 50px;
        padding-inline: 10px;
    }

    .btn-container {
        position: absolute;
        top: 0;
        right: 0; /* Position buttons on the right */
        bottom: 0;
        display: flex;
        align-items: center;
    }

    .btn-clear,
    .search-btn {
        color: #17324D;
        background-color: transparent;
        border: none;
    }

    .i-clear,
    .i-search {
        margin-top: 25px;
    }

    .i-clear {
        margin-right: -10px;
    }

    .btn-clear:hover {
        color: red;
    }

    .search-btn:hover {
        color: green;
    }

    .search-dropdown{
        margin-top:150px;
        position: sticky;
        z-index: 2;
    }

</style>

<!-------------------------------------------------------------export Styles -------------------------------------------------------------------->
<style>

    .dropdown {
        position: absolute;
        bottom: 0;
        right: 100px;
        display: flex;
        align-items: center;
        width: 74%;
    }

    .dropbtn {
        background-color: #00CC66;
        color: #FFFFFF;
        border-color: #17324D;
        text-align: left;
        height: 50px;
        font: normal normal medium 15px/28px Mark Pro;
    }

    .i-import {
        margin-left: 5px;
    }

    .i-export {
        margin-right: 5px;
    }

    .dropdown-content {
        position: absolute;
        color: #17324D;
        background-color: #FFFFFF;
        margin-top: 100px;
        width: 133px;
        box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
        font: normal normal bold 30px/38px;
        text-align: left;
        font-size: large;
        z-index: 3; /* Bring the elements to the front */
        display: block;
    }

</style>

<!----------------------------------------------------------import Json Popup Styles -------------------------------------------------------------->
<style>
    .popupbtn {
        background-color: #00CC66;
        color: #FFFFFF;
        border-color: #17324D;
        text-align: left;
        height: 50px;
        font: normal normal medium 15px/28px Mark Pro;
        margin-left: 5px;
    }


    .my-custom-popup-import {
        background-color: #1E314B !important;
        border-radius: 20px !important;
        padding: 20px;
        color: white !important;
        text-align: center;
        z-index: 1000;
        position: fixed;
        margin-top: 400px;
        margin-left: 150px;
    }


    .my-custom-title-class {
        color: #FFFFFF;
        font-weight: bold;
        font-size: 25px;
        margin-bottom: 20px;
    }

    .filecontainer {
        background-color: #FFFFFF;
        color: #17324D;
        padding: 5px;
        margin: 10px;
        border-radius: 15px;
        font-size: large;
    }

    .my-Strategy-class {
        background-color: #D4DEE7;
        color: #17324D;
        padding: 25px;
        margin: 20px;
        border-radius: 15px;
        font-size: large;
    }

    .selector {
        background-color: #FFFFFF;
        color: #17324D;
        width: 20%;
        font-weight: bold;
        font-size: large;
    }

    .my-custom-confirm-button-class,
    .my-custom-cancel-button-class {
        background-color: #00CC66;
        color: white;
        font-size: 16px;
        font-weight: bold;
        width: 120px; /* Adjust the width as needed */
        border-radius: 15px;
        cursor: pointer;
        padding: 10px;
    }

    .my-custom-cancel-button-class {
        background-color: red;
        margin-left: 10px;
        justify-content: right;
        padding: 10px;
        margin: 10px;
    }
</style>

<!-------------------------------------------------------------table Styles ---------------------------------------------------------------------->
<style>

    .loading {
        z-index: 30;
        margin: 250px;
    }

    .table-page {
        display: block;
        width: 100%;
        margin-top:150px;
    }

    .table-container {
        position: relative;
    }

    .table {
        width: 100%;
        text-align: center;
        background-color: #D4DEE7;
        border: hidden;
        flex: 1;
    }

        .table th,
        .table td {
            position: center;
            width: 10%;
        }

        .table th {
            padding: 20px;
        }

        .table td {
            border: 1px solid #17324D;
            padding: 15px;
        }

        .table tr:nth-child(even) {
            background-color: #FFFFFF;
        }

        .table tr {
            border: hidden;
            width: 100%;
        }

    .table-head {
        background-color: #00CC66;
        font-size: 20px;
        position: sticky;
        z-index: 1;
        color: #FFFFFF;
        top: 150px; /* Fixed position */
    }

    .table-body {
        font-size: 20px;
        color: #17324D;
        position: static;
        width:100%;
       
    }

        .table-body
        tr:hover {
            background-color: #748DA6;
        }



    .table-head-s {
        background-color: #00CC66;
        font-size: 20px;
        position: sticky;
        z-index: 2;
        color: #FFFFFF;
        width: 100%;
        top: 150px; /* Fixed position */
    }

    .table-body-s {
        font-size: 20px;
        color: #17324D;
        z-index: 1;
        width:100%;
      
       
    }

</style>

<!---------------------------------------------------------------swal Styles -------------------------------------------------------------------->
<style>

    .my-custom-popup-class {
        background-color: #1E314B !important;
        border-radius: 20px !important;
        padding-bottom: 20px;
        color: white !important;
        font-size: 20px !important;
        font-weight: bold !important;
    }

    .my-custom-title-class {
        color: #fff !important;
    }

    .my-custom-content-class {
    }

    .my-custom-confirm-button-class {
        background-color: blue !important;
        font-size: 20px !important;
        padding: 1px, 1px, 1px, 1px !important;
        font-weight: bold;
    }

    .my-custom-cancel-button-class {
        background-color: red !important;
        font-size: 20px !important;
        padding: 1px, 1px, 1px, 1px !important;
        font-weight: bold;
    }

    .Icon-popup {
        color: red !important;
    }

</style>


@code {

    private bool showPopup = false;
    private bool showExport = false;
    private IBrowserFile jsonFile;
    private string jsonContent;
    private string selectedUpdateStrategy = "0"; // Default to "Skip"


    private void OpenPopup()
    {
        showPopup = !showPopup; // Toggle showPopup between true and false

    }

    private void OpenExport()
    {
        showExport = !showExport;
    }


    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        jsonFile = e.File;

        if (jsonFile != null)
        {
            var stream = jsonFile.OpenReadStream();
            var reader = new StreamReader(stream);
            jsonContent = await reader.ReadToEndAsync();
        }
    }

    private async Task ImportJson()
    {
        var updateStrategy = (UpdateStrategy)Enum.Parse(typeof(UpdateStrategy), selectedUpdateStrategy);

        if (!string.IsNullOrEmpty(jsonContent))
        {
            var result = await PersonService.ADDJsonAsync(jsonContent, updateStrategy);

            if (result.Success)
            {
                // Import successful, handle UI updates or redirection
                // You may want to show a success message or refresh the UI
                // For example, redirect to the list page after import
                NavManager.NavigateTo("/");
                showPopup = false;
                // Reload or refresh the page
                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Import Succesed",
                        Text = $"{result.Message}",
                        Icon = SweetAlertIcon.Success
                    });
            }
            else
            {
                // Import failed, handle error
                // You may want to show an error message to the user
                // For example, display a modal or toast with the error message
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Import Failed",
                        Text = $"Error: {result.Message}",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        else
        {
            // JSON content is empty, show validation error
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Validation Error",
                    Text = "Please select a file",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private void DisplayDetails(int id)
    {
        NavManager.NavigateTo($"/personDisplay/{id}");
    }

    List<PersonModel> _PersonList;
    private string searchText = string.Empty;
    private List<PersonModel> allPersons;
    private List<PersonModel> searchResults;

    private async Task DownloadAsPdf()
    {
        var pgSize = new iTextSharp.text.Rectangle(141.732f, 141.732f);
        Document doc = new Document(pgSize);
        try
        {
            // Create a new PDF document
            Document document = new Document(PageSize.A4, 26, 36, 15, 0);

            MemoryStream memoryStream = new MemoryStream();
            PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);

            document.Open();

            // Add content to the PDF
            PdfPTable table = new PdfPTable(11); // Adjust the number of columns as per your data

            table.WidthPercentage = 90;

            //leave a gap before and after the table
            table.SpacingBefore = 20f;
            table.SpacingAfter = 30f;

            BaseFont bfHelvetica = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
            Font smallFont = new Font(bfHelvetica, 5, Font.NORMAL, BaseColor.BLACK); // Changed font size to 4 and set color to black
            Font boldFont = new Font(bfHelvetica, 5, Font.BOLD, BaseColor.WHITE); // Added bold font for header row

            // Add headers with bold and white font color
            table.AddCell(new PdfPCell(new Phrase("Vorname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Nachname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Zwischenname", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Email", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Telefonnummer", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Strasse", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Hausnummer", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("PLZ", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Stadt", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Land", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });
            table.AddCell(new PdfPCell(new Phrase("Gender", boldFont)) { BackgroundColor = new BaseColor(66, 139, 202) });

            // Add data with small font size and alternating row background colors
            BaseColor evenBgColor = new BaseColor(255, 255, 255); // White background for even rows
            BaseColor oddBgColor = new BaseColor(238, 238, 238); // Light gray background for odd rows
            for (int i = 0; i < _PersonList.Count; i++)
            {
                var person = _PersonList[i];

                table.AddCell(new PdfPCell(new Phrase(person.Vorname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Nachname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Zwischenname, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Email, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                var telefonnummern = string.Join(", ", person.PersonNummern.Select(p => p.TelNummer));
                table.AddCell(new PdfPCell(new Phrase(telefonnummern, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Strasse, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Hausnummer, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.PLZ.ToString(), smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Stadt, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Land, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });
                table.AddCell(new PdfPCell(new Phrase(person.Gender, smallFont)) { BackgroundColor = (i % 2 == 0 ? evenBgColor : oddBgColor) });

                // Set padding to wrap text
                foreach (PdfPCell cell in table.Rows[table.Rows.Count - 1].GetCells())
                {
                    cell.Padding = 5;
                }
            }

            document.Add(table);

            document.Close();

            // Trigger the download
            byte[] data = memoryStream.ToArray();
            await JSRuntime.InvokeVoidAsync("downloadPdf", Convert.ToBase64String(data), "person_data.pdf");
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private async Task DownloadAsJson()
    {
        try
        {
            var transformedList = _PersonList.Select(person => new
            {
                id = person.Id,
                nachname = person.Nachname,
                vorname = person.Vorname,
                zwischenname = person.Zwischenname,
                telefonnummer = person.PersonNummern,
                eMail = person.Email,
                strasse = ReplaceUnicodeEscapeSequences(person.Strasse), // Replace Unicode escape sequences
                hausnummer = person.Hausnummer,
                plz = person.PLZ,
                stadt = person.Stadt,
                land = person.Land,
                gender = person.Gender
            }).ToList();

            var jsonContent = JsonConvert.SerializeObject(transformedList, Formatting.Indented);

            var fileName = "person_data.json";

            // Create a byte array from the JSON content
            byte[] data = Encoding.UTF8.GetBytes(jsonContent);

            // Trigger the download
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, data);

        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    private string ReplaceUnicodeEscapeSequences(string input)
    {
        return Regex.Replace(input, @"\\u(?<Value>[a-zA-Z0-9]{4})", m =>
        {
            return ((char)int.Parse(m.Groups["Value"].Value, System.Globalization.NumberStyles.HexNumber)).ToString();
        });
    }

    private void ClearSearchText()
    {
        searchResults = null;
        searchText = "";
    }

    protected override async Task OnInitializedAsync()
    {
        allPersons = await PersonService.GetAllPersonsList();
        _PersonList = await PersonService.GetAllPersonsList();

    }

    private void HandleSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        HandleSearch();
    }

    private void HandleSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            searchResults = allPersons
            // .Where(person => person.Nachname.Contains(searchText) || person.Vorname.Contains(searchText))
            // .ToList();
            .Where(person =>
            person.Nachname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0
            || person.Vorname.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0)
            .ToList();
        }
        else
        {
            searchResults = null; // Set it to null when search text is empty
        }
    }

    private async void BtnSearch_Clicked()
    {
        string searchText = this.searchText;

        if (!string.IsNullOrEmpty(searchText))
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"Contact with name '{searchText}' does not exist.",
                    Text = "Do you want to add it?",
                    //Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "yes",
                    CancelButtonText = "No",

                    CustomClass = new SweetAlertCustomClass
                    {
                        Popup = "my-custom-popup-class",
                        Title = "my-custom-title-class",
                        Icon = "Icon-popup",
                        Content = "my-custom-content-class",
                        ConfirmButton = "my-custom-confirm-button-class",
                        CancelButton = "my-custom-cancel-button-class"
                    }


                });

            var confrim = !string.IsNullOrEmpty(result.Value); // if value ture means that user clikced on conferm btn.

            if (confrim)
            {
                NavManager.NavigateTo($"addPerson?name={searchText}");
            }

            //     bool addContact = await JSRuntime.InvokeAsync<bool>(
            //         "confirm",
            //         $"Contact with name '{searchText}' does not exist. Do you want to add it?");

            //     if (addContact)
            //     {
            //         NavManager.NavigateTo($"addPerson?name={searchText}");
            //     }
            // }
            else
            {
                //  await oninitializedasync();
            }
        }
    }

    private void DisplayUpdate(int personId)
    {
        NavManager.NavigateTo($"updatePerson/{personId}");
        // NavManager.NavigateTo($"viewPerson/{personId}");

    }

    private async void DisplayOption(PersonModel personDetail)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "options",
                ShowCancelButton = true,
                ShowDenyButton = true,
                ConfirmButtonText = "Update",
                DenyButtonText = "Delete",

                CustomClass = new SweetAlertCustomClass
                {
                    Popup = "my-custom-popup-class",
                    Title = "my-custom-title-class",
                    Icon = "Icon-popup",
                    Content = "my-custom-content-class",
                    ConfirmButton = "my-custom-confirm-button-class",
                    CancelButton = "my-custom-cancel-button-class"
                },

            });

        if (result.IsConfirmed)
        {
            NavManager.NavigateTo($"updatePerson/{personDetail.Id}");

            // if (result.Value == "Update")
            // {
            //     // Handle Update button click
            //     NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
            // }
        }
        if (result.IsDenied)
        {
            DisplayDeleteConfirmation(personDetail.Id);
        }

        else
        {
            // Handle Cancel button click or outside click

        }


        //     var response = await App.Current.MainPage.DisplayActionSheet(
        //         "Select Option",
        //         "Ok",
        //         null,
        //         "Update Contact",
        //         "Delete Contact");

        //     if (response == "Update Contact")
        //     {
        //         NavManager.NavigateTo($"updatePerson/{personDetail.Id}");
        //     }
        //     else if (response == "Delete Contact")
        //     {
        //         DisplayDeleteConfirmation(personDetail.Id);


        //     }
    }

    private async void DisplayDeleteConfirmation(int personId)
    {

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "you sure you want to delete?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "yes",
                CancelButtonText = "No",

                CustomClass = new SweetAlertCustomClass
                {
                    Popup = "my-custom-popup-class",
                    Title = "my-custom-title-class",
                    Icon = "Icon-popup",
                    Content = "my-custom-content-class",
                    ConfirmButton = "my-custom-confirm-button-class",
                    CancelButton = "my-custom-cancel-button-class"
                }


            });

        var confrim = !string.IsNullOrEmpty(result.Value); // if value ture means that user clikced on conferm btn.

        //  bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
        if (confrim)
        {
            var deleteresponse = await PersonService.DeletePerson(personId
            // {
            //     Id = personId
            // }
            );

            if (deleteresponse.Success)
            {
                //await ShowDeleteDialog();

                await OnInitializedAsync();

                StateHasChanged();

                if (!string.IsNullOrEmpty(result.Value))
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Icon = SweetAlertIcon.Success,
                            Text = "Contact deleted",

                            CustomClass = new SweetAlertCustomClass
                            {

                                Content = "my-custom-content-class",
                                ConfirmButton = "my-custom-confirm-button-class",
                            }


                        });
                }

            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Icon = SweetAlertIcon.Error,
                        Text = "something went wrong :(",

                        CustomClass = new SweetAlertCustomClass
                        {

                            Content = "my-custom-content-class",
                            ConfirmButton = "my-custom-confirm-button-class",
                        }


                    });
            }
        }
    }

}




